
import pyglet
import random
from mines import graphics


class Tile:
    def __init__(self, board, x, y):
        self.board = board
        self.x = x
        self.y = y
        self.covered = True
        self.mine = False
        self.value = 0
        self.flagged = False
        self.sprite = pyglet.sprite.Sprite(
            graphics.img_covered,
            x = board.x + x * graphics.img_covered.width,
            y = board.y + y * graphics.img_covered.height,
            batch = graphics.batch,
            group = graphics.group_front
        )
    
    def __del__(self):
        self.sprite.delete()
    
    def __repr__(self):
        return f"<Tile({self.x}, {self.y})>"
    
    def get_neighbors(self):
        neighbors = []
        for ny in range(max(self.y - 1, 0), min(self.y + 2, self.board.height)):
            for nx in range(max(self.x - 1, 0), min(self.x + 2, self.board.width)):
                if nx != self.x or ny != self.y:
                    neighbors.append(self.board.tiles[(nx, ny)])
        return neighbors
    
    def uncover(self):
        if not self.covered:
            return
        
        self.covered = False
        
        if self.mine:
            self.sprite.image = graphics.img_mine
        else:
            self.sprite.image = graphics.img_values[self.value]

        if self.value == 0:
            for neighbor in [n for n in self.get_neighbors() if n.covered]:
                neighbor.uncover()
    
    def press(self):
        if self.covered:
            self.sprite.image = graphics.img_pressed
    
    def release(self):
        self.sprite.image = graphics.img_covered
    
    def click(self):
        print(f"clicked ({self.x}, {self.y}), mine={self.mine}, value={self.value}, covered={self.covered}")
        if self.mine:
            #self.board.game.hit_mine()
            pass
        else:
            self.uncover()
        #self.board.game.check_win_condition()
    
    def click_neighbors(self):
        valid_neighbors = [n for n in self.get_neighbors() if n.covered and not n.flagged]
        
        for neighbor in valid_neighbors:
            neighbor.click()
    
    def flag(self):
        if not self.covered:
            return
        
        if self.flagged:
            self.flagged = False
            self.sprite.image = graphics.img_covered
        else:
            self.flagged = True
            self.sprite.image = graphics.img_flag


class Board:
    def __init__(self, x, y, width, height, mine_count):
        self.x = x
        self.y = y
        self.width = width
        self.height = height
        self.tiles = {}
        self.mine_count = 0
        self.create_tiles()
        self.plant_mines(mine_count)
    
    def create_tiles(self):
        for y in range(self.height):
            for x in range(self.width):
                tile = Tile(self, x, y)
                self.tiles[(x, y)] = tile

    def plant_mines(self, mine_count):
        print(f"Planting {mine_count} mines")
        i = 0
        while i < mine_count:
            x = random.randint(0, self.width - 1)
            y = random.randint(0, self.height - 1)
            tile = self.tiles[(x, y)]
            if not tile.mine:
                tile.mine = True
                for neighbor in tile.get_neighbors():
                    neighbor.value += 1
                i += 1
        self.mine_count = mine_count
    
    def get_tile(self, x, y):
        coords = (
            (x - self.x)//graphics.img_covered.width,
            (y - self.y)//graphics.img_covered.height)
        if coords in self.tiles:
            return self.tiles[coords]
        else:
            return None
    
    def uncover_all(self):
        for y in range(self.height):
            for x in range(self.width):
                self.tiles[(x, y)].uncover()


class Game:
    def __init__(self, app, w, h, mine_count):
        print(f"Starting game: {w}x{h} board with {mine_count} mines")
        self.app = app
        self.board = Board(32, 32, w, h, mine_count)
        pyglet.gl.glClearColor(0.35, 0.43, 0.5, 1.0)
        self.pressed_tile = None
    
    def __del__(self):
        self.app.window.remove_handlers(self)
    
    def on_mouse_press(self, x, y, buttons, modifiers):
        if buttons & pyglet.window.mouse.LEFT:
            self.pressed_tile = self.board.get_tile(x, y)
            if self.pressed_tile is not None:
                self.pressed_tile.press()
            print(f"pressed {self.pressed_tile}")
    
    def on_mouse_release(self, x, y, buttons, modifiers):
        if buttons & pyglet.window.mouse.LEFT:
            tile = self.board.get_tile(x, y)
            if tile is not None and tile is self.pressed_tile:
                tile.click()
            elif self.pressed_tile is not None and tile is not self.pressed_tile 
            self.pressed_tile = None
            print(f"released {tile}")

